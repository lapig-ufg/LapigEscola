"""
Django settings for lapig project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
import os

load_dotenv()  # Carrega as variáveis do .env


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
SECURE_CROSS_ORIGIN_OPENER_POLICY = None

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-nt!8!2&y*27+zhtn!)*vjsbi&_$%x_8%j2o-u0)e3hw1_s30#4'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "django.contrib.gis",
    'escola.apps.EscolaConfig',
    'django_ckeditor_5',
    'storages',
    'ordered_model',
    'corsheaders',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.openid_connect',
]

MIDDLEWARE = [

    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
'allauth.account.middleware.AccountMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

AUTHENTICATION_BACKENDS = [
    # ...
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
    # ...
]

# Pegar múltiplas origens da variável de ambiente
CORS_ALLOWED_ORIGINS = []

# Origem principal
django_host = os.environ.get('DJANGO_HOST', 'http://localhost:8185')
CORS_ALLOWED_ORIGINS.append(django_host)

# Origens adicionais
additional_origins = os.environ.get('ADDITIONAL_CORS_ORIGINS', '')
if additional_origins:
    CORS_ALLOWED_ORIGINS.extend([
        origin.strip()
        for origin in additional_origins.split(',')
        if origin.strip()
    ])


ROOT_URLCONF = 'lapig.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS':  [BASE_DIR.joinpath('nuxt-dist/public')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },

]

WSGI_APPLICATION = 'lapig.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',  # PostGIS em vez de spatialite
        'NAME': os.environ.get('DB_NAME', 'lapig_db'),
        'USER': os.environ.get('DB_USER', 'postgres'),
        'PASSWORD': os.environ.get('DB_PASSWORD', 'postgres'),
        'HOST': os.environ.get('DB_HOST', 'db'),
        'PORT': os.environ.get('DB_PORT', '5432'),

    }
}


SOCIALACCOUNT_PROVIDERS = {
    "openid_connect": {
        "APPS": [
            {
                "provider_id": "keycloak",
                "name": "Lapig",
                "client_id": os.getenv('KEYCLOACK_CLIENT_ID',''),
                "secret": os.getenv('KEYCLOACK_SECRET',''),
                "settings": {
                    "server_url": os.getenv('KEYCLOACK_SERVER_URL',''),
                },
            }
        ]
    }
}

AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
AWS_S3_ENDPOINT_URL = os.getenv('AWS_S3_ENDPOINT_URL')
AWS_S3_USE_SSL = os.getenv('AWS_S3_USE_SSL') == 'True'  #
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}
AWS_QUERYSTRING_AUTH = False

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
STATICFILES_STORAGE = 'storages.backends.s3boto3.S3StaticStorage'  # Optional for static files
CKEDITOR_5_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'


AWS_LOCATION = 'media'
AWS_IMAGES_PATH = 'imagens/'

CKEDITOR_5_CONFIGS = {
    'default': {
        'uploadUrl': '/api/files/upload_file/',
        'toolbar': {
            'items': [
                'heading',
                '|',
                'bold', 'italic', 'underline', 'strikethrough',
                '|',
                'alignment',
                '|',
                'bulletedList', 'numberedList', 'outdent', 'indent',
                '|',
                'blockQuote', 'link', 'imageUpload', 'mediaEmbed', 'insertTable',
                '|',
                'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor',
                '|',
                'code', 'codeBlock',
                '|',
                'undo', 'redo'
            ],
            'shouldNotGroupWhenFull': True
        },
        'language': 'pt-br',
        'image': {
            'toolbar': [
                'imageTextAlternative',
                '|',
                'imageStyle:alignLeft', 'imageStyle:alignRight', 'imageStyle:alignCenter', 'imageStyle:alignBlock',
                '|',
                'toggleImageCaption',
                '|',
                'imageResize:25', 'imageResize:50', 'imageResize:75', 'imageResize:100'
            ],
            'upload': {
                'types': ['jpeg', 'jpg', 'png', 'gif', 'webp'],
                'headers': {
                    'X-CSRFToken': 'csrftoken',  # Para proteção CSRF
                }
            }
        },
        'table': {
            'contentToolbar': [
                'tableColumn', 'tableRow', 'mergeTableCells',
                'tableProperties', 'tableCellProperties'
            ]
        },
        'mediaEmbed': {
            'previewsInData': True
        },
        'link': {
            'decorators': {
                'isExternal': {
                    'mode': 'manual',
                    'label': 'Abre em nova aba',
                    'attributes': {
                        'target': '_blank',
                        'rel': 'noopener noreferrer'
                    }
                }
            }
        },
        'htmlSupport': {
            'allow': [
                {'name': 'div', 'classes': True},
                {'name': 'span', 'classes': True}
            ]
        }
    }
}



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR.joinpath('nuxt-dist/public/static')]  # Assets do Nuxt
STATIC_ROOT = BASE_DIR.joinpath('staticfiles')
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
